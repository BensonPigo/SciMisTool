// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: proto/taskexecutor.proto

package taskexecutor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskExecutor_ExecuteTask_FullMethodName = "/taskexecutor.TaskExecutor/ExecuteTask"
	TaskExecutor_GetScripts_FullMethodName  = "/taskexecutor.TaskExecutor/GetScripts"
)

// TaskExecutorClient is the client API for TaskExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定義服務
type TaskExecutorClient interface {
	ExecuteTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	GetScripts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetScriptsResponse, error)
}

type taskExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskExecutorClient(cc grpc.ClientConnInterface) TaskExecutorClient {
	return &taskExecutorClient{cc}
}

func (c *taskExecutorClient) ExecuteTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, TaskExecutor_ExecuteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskExecutorClient) GetScripts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetScriptsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScriptsResponse)
	err := c.cc.Invoke(ctx, TaskExecutor_GetScripts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskExecutorServer is the server API for TaskExecutor service.
// All implementations must embed UnimplementedTaskExecutorServer
// for forward compatibility.
//
// 定義服務
type TaskExecutorServer interface {
	ExecuteTask(context.Context, *TaskRequest) (*TaskResponse, error)
	GetScripts(context.Context, *Empty) (*GetScriptsResponse, error)
	mustEmbedUnimplementedTaskExecutorServer()
}

// UnimplementedTaskExecutorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskExecutorServer struct{}

func (UnimplementedTaskExecutorServer) ExecuteTask(context.Context, *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTask not implemented")
}
func (UnimplementedTaskExecutorServer) GetScripts(context.Context, *Empty) (*GetScriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScripts not implemented")
}
func (UnimplementedTaskExecutorServer) mustEmbedUnimplementedTaskExecutorServer() {}
func (UnimplementedTaskExecutorServer) testEmbeddedByValue()                      {}

// UnsafeTaskExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskExecutorServer will
// result in compilation errors.
type UnsafeTaskExecutorServer interface {
	mustEmbedUnimplementedTaskExecutorServer()
}

func RegisterTaskExecutorServer(s grpc.ServiceRegistrar, srv TaskExecutorServer) {
	// If the following call pancis, it indicates UnimplementedTaskExecutorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskExecutor_ServiceDesc, srv)
}

func _TaskExecutor_ExecuteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskExecutorServer).ExecuteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskExecutor_ExecuteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskExecutorServer).ExecuteTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskExecutor_GetScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskExecutorServer).GetScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskExecutor_GetScripts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskExecutorServer).GetScripts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskExecutor_ServiceDesc is the grpc.ServiceDesc for TaskExecutor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskExecutor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskexecutor.TaskExecutor",
	HandlerType: (*TaskExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTask",
			Handler:    _TaskExecutor_ExecuteTask_Handler,
		},
		{
			MethodName: "GetScripts",
			Handler:    _TaskExecutor_GetScripts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/taskexecutor.proto",
}
